#include "PSpectrum.hpp"
#include "PSpectrumMaker.hpp"
#include "PFluxPerEnergyIntervalMaker.hpp"
#include "PFluxPerEnergyInterval.hpp"
#include <cmath>
#include <fstream>

using namespace std;
using namespace physapi;

class AGNFormula : public PSpectralFormulaBase
{
public:
    constexpr static phys_float E_cut = 300.0E3;
    constexpr static phys_float E_low = 1.0;
    constexpr static phys_float gamma = 1.8;
    constexpr static phys_size N_intervals = 5000;

    phys_float operator()(phys_float energy) const override
    {
        return std::pow(energy, -gamma) * std::exp(-energy / E_cut);
    }
};

int main()
{
    const phys_float numberOfPhotons = 1.5E9;

    PSpectrum<AGNFormula::N_intervals> intrinsicSpectrum{
        AGNFormula::E_low,
        AGNFormula::E_cut,
        eSpectrumScale::LOG};

    AGNFormula myFormula;

    PSpectrumMaker<AGNFormula::N_intervals, 100'000'000> spectrumMaker;

    spectrumMaker(intrinsicSpectrum, numberOfPhotons, myFormula);

    PFluxPerEnergyIntervalMaker<AGNFormula::N_intervals> fluxMaker{1.0E3, 4 * Pi, 1.0E3, intrinsicSpectrum};

    PFluxPerEnergyInterval<AGNFormula::N_intervals> flux_dE(fluxMaker(intrinsicSpectrum, 4 * Pi));

    ofstream fout;
    fout.open("myFile");

    fout << flux_dE << endl;

    return 0;
}